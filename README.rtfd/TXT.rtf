{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\froman\fcharset0 BookAntiqua;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 GillSans;
\f3\fmodern\fcharset0 Courier;\f4\fnil\fcharset0 LucidaGrande;\f5\fmodern\fcharset0 Courier-Bold;
\f6\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red26\green26\blue26;
\red163\green46\blue111;\red0\green0\blue0;\red109\green109\blue109;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl640

\f0\b\fs64 \cf2 \cb3 Project 4: A Scheme Interpreter\
\pard\pardeftab720\sl440\qc

\f1\b0\fs24 \cf0 \pard\pardeftab720\sl440\qc

\f2 \cf4 \
\pard\pardeftab720\sl440\qc

\i \cf4 Eval calls apply,\
which just calls eval again!\
When does it all end?
\i0 \
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 Introduction\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 In this project, you will develop an interpreter for a subset of the Scheme language. As you proceed, think about the issues that arise in the design of a programming language; many quirks of languages are the byproduct of implementation decisions in interpreters and compilers.\
You will also implement some small programs in Scheme, including the 
\f3 count_change
\f2  function that we studied in lecture. Scheme is a simple but powerful functional language. You should find that much of what you have learned about Python transfers cleanly to Scheme as well as to other programming languages. To learn more about Scheme, you can read the original {\field{\*\fldinst{HYPERLINK "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%25_toc_start"}}{\fldrslt \cf5 \ul \ulc5 Structure and Interpretation of Computer Programs}} online for free. Examples from chapters 1 and 2 are included as test cases for this project. Language features from Chapters 3, 4, and 5 are not part of this project, but of course you are welcome to extend your interpreter to implement more of the language. Since we only include a subset of the language, your interpreter will not match exactly the behavior of other interpreters such as STk.\
The project concludes with an open-ended graphics contest that challenges you to produce recursive images in only a few lines of Scheme. As an example of what you might create, the picture above abstractly depicts all the ways of making change for $0.50 using U.S. currency. All flowers appear at the end of a branch with length 50. Small angles in a branch indicate an additional coin, while large angles indicate a new currency denomination. In the contest, you too will have the chance to unleash your inner recursive artist.\
This project includes several files, but all of your changes will be made to the first three: {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme.py}}, {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_reader.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_reader.py}}, and {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/tests.scm"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 tests.scm}}. You can download all of the project code as a {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.zip"}}{\fldrslt \cf5 \ul \ulc5 zip archive}}.\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trcbpat3 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth11960\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f3 \cf5 \cb1 \ul \ulc5 scheme.py}}\cf0 \cb1 \cell 
\pard\intbl\itap1\pardeftab720
\cf0 The Scheme evaluator\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trcbpat3 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth11960\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_reader.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_reader.py}}\cell 
\pard\intbl\itap1\pardeftab720
\cf0 The Scheme parser\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trcbpat3 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth11960\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/tests.scm"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 tests.scm}}\cell 
\pard\intbl\itap1\pardeftab720
\cf0 A collection of test cases written in Scheme that are designed to test your Scheme interpreter. You will implement some Scheme procedures yourself.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trcbpat3 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth11960\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_tokens.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_tokens.py}}\cell 
\pard\intbl\itap1\pardeftab720
\cf0 A tokenizer for scheme\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trcbpat3 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth11960\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_primitives.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_primitives.py}}\cell 
\pard\intbl\itap1\pardeftab720
\cf0 Primitive Scheme procedures\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trcbpat3 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth11960\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_test.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_test.py}}\cell 
\pard\intbl\itap1\pardeftab720
\cf0 A testing framework for Scheme\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trcbpat3 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth11960\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt200 \clpadl200 \clpadb200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/ucb.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 ucb.py}}\cell 
\pard\intbl\itap1\pardeftab720
\cf0 Utility functions for 61A\cell \lastrow\row
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 \cb3 Logistics\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 This is a two-part project. As in the previous project, you'll work in a team of two people, person A and person B. All questions are labeled sequentially, but some are designated for certain people by a prefix of their letter (A or B). Both partners should understand the solutions to all questions.\
In the first part, you will develop the interpreter in stages:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls1\ilvl0\cf4 {\listtext	\'95	}Reading Scheme expressions\
{\listtext	\'95	}Primitive procedure calls\
{\listtext	\'95	}Symbol evaluation and definition\
{\listtext	\'95	}Lambda expressions and procedure definition\
{\listtext	\'95	}Calling user-defined procedures\
{\listtext	\'95	}Evaluation of various special forms\
\pard\pardeftab720\sl440\sa180
\cf4 In the second part, you will implement Scheme procedures that are similar to some exercises that you previously completed in Python.\
There are 27 possible correctness points and 3 composition points. The composition score in this project will evaluate the clarity of your code 
\i and
\i0  your ability to write tests that verify the behavior of your interpreter.\
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 The Scheme Language\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 Before you begin working on the project, review what you have learned in lecture about the Scheme language in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a-tz/book/chapters/interpretation.html#functional-programming"}}{\fldrslt \cf5 \ul \ulc5 Chapter 2.5}} of the course lecture notes.\
\pard\pardeftab720\sl440\sa180

\b \cf4 Read-Eval-Print.
\b0  Run interactively, the interpreter reads Scheme expressions, evaluates them, and prints the results. The interpreter uses 
\f3 scm>
\f2  as the prompt.\
\pard\pardeftab720

\f3 \cf4     scm> 2\
    2\
    scm> (((lambda (f) (lambda (x) (f f x)))\
          (lambda (f k) (if (zero? k) 1 (* k (f f (- k 1)))))) 5)\
    120\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 The starter code for your Scheme interpreter in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme.py}} can successfully evaluate the first expression above, since it consists of a single literal numeral. The second (a computation of 5 factorial) will not work just yet.\
\pard\pardeftab720\sl440\sa180

\b \cf4 Load.
\b0  Our 
\f3 load
\f2  function differs from standard Scheme in that we use a symbol for the file name. For example,\
\pard\pardeftab720

\f3 \cf4     scm> (load 'tests)\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Symbols.
\b0  Unlike some implementations of Scheme, in this project numbers and boolean values cannot be used as symbols. Symbols may not be capitalized.\

\b Turtle Graphics.
\b0  In addition to standard Scheme procedures, we include procedure calls to the Python 
\f3 turtle
\f2  package. Read its {\field{\*\fldinst{HYPERLINK "http://docs.python.org/py3k/library/turtle.html"}}{\fldrslt \cf5 \ul \ulc5 documentation}}.\
\pard\pardeftab720\sl440\sa180
\cf4 \ul \ulc4 Note\ulnone : The 
\f3 turtle
\f2  Python module may not be installed by default on your personal computer. However, the 
\f3 turtle
\f2  module is installed on the instructional machines. So, if you wish to create turtle graphics for this project (i.e. for the contest), then you'll either need to setup 
\f3 turtle
\f2  on your personal computer, or test on your class account.\
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 Testing\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 The tests for this project are largely taken from the Scheme textbook that 61A used for many years. Examples from relevant chapters (and a few more examples to test various corner cases) appear in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/tests.scm"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 tests.scm}}.\
You can also compare the output of your interpreter to the expected output by running {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_test.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_test.py}}.\
\pard\pardeftab720

\f3 \cf4     python3 scheme_test.py\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 The {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/tests.scm"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 tests.scm}} file contains Scheme expressions interspersed with comments in the form:\
\pard\pardeftab720

\f3 \cf4     (+ 1 2)\
    ; expect 3\
    (/ 1 0)\
    ; expect Error\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 Above, {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_test.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_test.py}} will evaluate 
\f3 (+ 1 2)
\f2  using your code in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme.py}}, then output a test failure if 
\f3 3
\f2  is not returned. The second example tests for an error (but not the specific error message). The 
\f3 scheme_test
\f2  script collects these expected outputs and compares them with the actual output from the program, counting and reporting mismatches.\
Only a small subset of tests are designated to run by default because 
\f3 tests.scm
\f2  contains an 
\f3 (exit)
\f2  call near the beginning, which halts testing. As you complete more of the project, you should move or remove this call. 
\i Note that your interpreter doesn't know how to exit until Problems 3 and 4 are completed.
\i0 \
\pard\pardeftab720\sl440\sa180

\b \cf4 Important
\b0 : As you proceed in the project, add new tests to the top of 
\f3 tests.scm
\f2  to verify the behavior of your implementation.\
Finally, as always, you can run the doctests for the project using:\
\pard\pardeftab720

\f3 \cf4     python3 -m doctest scheme.py scheme_reader.py\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 Don't forget to use the 
\f3 trace
\f2  decorator from the 
\f3 ucb
\f2  module to follow the path of execution in your interpreter.\
As you develop your Scheme interpreter, you may find that Python raises various uncaught exceptions when evaluating Scheme expressions. As a result, your Scheme interpreter will crash. Some of these may be the results of bugs in your program, and some may be useful indications of errors in user programs. The former should be fixed (of course!) and the latter should be caught and changed into 
\f3 SchemeError
\f2  exceptions, which are caught and printed as error messages by the Scheme read-eval-print loop we've written for you. Python exceptions that "leak out" to the user in raw form are errors in your interpreter (tracebacks are for implementors, not civilians).\
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 Running Your Scheme Interpreter\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 To run your Scheme interpreter in an interactive mode, type:\
\pard\pardeftab720

\f3 \cf4     python3 scheme.py\
  \
\pard\pardeftab720\sl440

\f2 \cf4 Alternately, you can tell your Scheme interpreter to evaluate the lines of an input file by passing the file name as an argument to {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme.py}}:
\f3 \
\pard\pardeftab720
\cf4     python3 scheme.py tests.scm\
  \
\pard\pardeftab720\sl440

\f2 \cf4 Currently, your Scheme interpreter can handle a few simple expressions, such as:
\f3 \
\pard\pardeftab720
\cf4     scm> 1\
    1\
    scm> 42\
    42\
    scm> #t\
    True\
  \
\pard\pardeftab720\sl440

\f2 \cf4 To exit the Scheme interpreter, issue either 
\f3 Ctrl-c
\f2  or 
\f3 Ctrl-d
\f2  or evaluate the 
\f3 exit
\f2  procedure:
\f3 \
\pard\pardeftab720
\cf4     scm> (exit)\
  \
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 The Reader\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 The function 
\f3 scheme_read
\f2  in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_reader.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_reader.py}} parses a 
\f3 Buffer
\f2  ({\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/buffer.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 buffer.py}}) instance that returns valid Scheme tokens on invocations of 
\f3 current
\f2  and 
\f3 pop
\f2 methods. It returns the next full Scheme expression in the 
\f3 src
\f2  buffer, using an internal representation as follows:\cf0 \cb1 \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trmarl3600 \trmarr3620 \trbrdrt\brdrs\brdrw20\brdrcf7 \trbrdrl\brdrs\brdrw20\brdrcf7 \trbrdrr\brdrs\brdrw20\brdrcf7 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl440\qc

\b \cf0 Scheme Data Type\cell 
\pard\intbl\itap1\pardeftab720\sl440\qc
\cf0 Our Internal Representation\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trmarl3600 \trmarr3620 \trbrdrl\brdrs\brdrw20\brdrcf7 \trbrdrr\brdrs\brdrw20\brdrcf7 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl440

\b0 \cf0 Numbers\cell 
\pard\intbl\itap1\pardeftab720\sl440
\cf0 Python's built-in 
\f3 int
\f2  and 
\f3 float
\f2  data types.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trmarl3600 \trmarr3620 \trbrdrl\brdrs\brdrw20\brdrcf7 \trbrdrr\brdrs\brdrw20\brdrcf7 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl440
\cf0 Symbols\cell 
\pard\intbl\itap1\pardeftab720\sl440
\cf0 Python's built-in 
\f3 string
\f2  data type.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trmarl3600 \trmarr3620 \trbrdrl\brdrs\brdrw20\brdrcf7 \trbrdrr\brdrs\brdrw20\brdrcf7 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl440
\cf0 Booleans (
\f3 #t
\f2 , 
\f3 #f
\f2 )\cell 
\pard\intbl\itap1\pardeftab720\sl440
\cf0 Python's built-in 
\f3 True
\f2 , 
\f3 False
\f2  values.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trmarl3600 \trmarr3620 \trbrdrl\brdrs\brdrw20\brdrcf7 \trbrdrr\brdrs\brdrw20\brdrcf7 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl440
\cf0 Pairs\cell 
\pard\intbl\itap1\pardeftab720\sl440
\cf0 The 
\f3 Pair
\f2  class, defined in the {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_reader.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_reader.py}} file.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trmarl3600 \trmarr3620 \trbrdrl\brdrs\brdrw20\brdrcf7 \trbrdrb\brdrs\brdrw20\brdrcf7 \trbrdrr\brdrs\brdrw20\brdrcf7 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf7 \clbrdrl\brdrs\brdrw20\brdrcf7 \clbrdrb\brdrs\brdrw20\brdrcf7 \clbrdrr\brdrs\brdrw20\brdrcf7 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl440
\cf0 nil\cell 
\pard\intbl\itap1\pardeftab720\sl440
\cf0 The 
\f3 nil
\f2  object, defined in the {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_reader.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_reader.py}} file.\cell \lastrow\row
\pard\pardeftab720\sl440\sa180

\b \cf4 \cb3 Problem 1
\b0  (1 pt). Complete the 
\f3 scheme_read
\f2  function in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_reader.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_reader.py}} by adding support for quotation.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls2\ilvl0\cf4 {\listtext	\'95	}If the next token in 
\f3 src
\f2  is the string 
\f3 "nil"
\f2 , return the 
\f3 nil
\f2  object. (provided)\
{\listtext	\'95	}If the next token is not a delimiter, then it is an atom. Return it. (provided)\
{\listtext	\'95	}If the current token refers to the beginning of a 
\b quote
\b0  (such as 
\f3 'bagel
\f2 ), then treat the quoted symbol as the special form 
\f3 (quote bagel)
\f2 .\
{\listtext	\'95	}If the current token is a left parenthesis 
\f3 "("
\f2 , return the result of 
\f3 read_tail
\f2 . (provided)\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem 2
\b0  (2 pt). Complete the 
\f3 read_tail
\f2  function in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_reader.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_reader.py}} by adding support for dotted lists. A dotted list in Scheme is not necessarily a well-formed list, but instead has an arbitrary 
\f3 second
\f2  attribute that may be any Scheme value.\
The 
\f3 read_tail
\f2  function expects to read the rest of a list or dotted list, assuming the open parenthesis has already been popped by 
\f3 scheme_read
\f2 .\
Consider the case of calling 
\f3 scheme_read
\f2  on input "
\f3 (1 2 . 3)
\f2 ". The 
\f3 read_tail
\f2  function will be called on the suffix "
\f3 1 2 . 3)
\f2 ", which is\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls3\ilvl0\cf4 {\listtext	\'95	}the pair consisting of the Scheme value 
\f3 1
\f2  and the value of the tail "
\f3 2 . 3)
\f2 ", which is\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440
\ls3\ilvl1\cf4 {\listtext	
\f4 \uc0\u9702 
\f2 	}the pair consisting of the Scheme value 
\f3 2
\f2  and the Scheme value 
\f3 3
\f2 .\
\pard\pardeftab720\sl440
\cf4 Thus, 
\f3 read_tail
\f2  would return 
\f3 Pair(1, Pair(2, 3))
\f2 .\
\pard\pardeftab720\sl440\sa180

\i \cf4 Hint:
\i0  In order to verify that only one element follows a dot, after encountering a 
\f3 '.'
\f2 , read one additional expression and then check to see that a closing parenthesis follows.\
To verify that your solutions to Problem 1 and 2 work correctly, run the doctests for {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_reader.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_reader.py}} and test your parser interactively by running,\
\pard\pardeftab720

\f3 \cf4     # python3 scheme_reader.py\
    read> 42\
    42\
    read> '(1 2 3)\
    (quote (1 2 3))\
    read> nil\
    ()\
    read> '()\
    (quote ())\
    read> (1 (2 3) (4 (5)))\
    (1 (2 3) (4 (5)))\
    read> (1 (9 8) . 7)\
    (1 (9 8) . 7)\
    read> (hi there . (cs . (student)))\
    (hi there cs student)\
  \
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 The Evaluator\
\pard\pardeftab720\sl440\sa180

\f2\fs24 \cf4 All further changes to the interpreter will be made in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f5 \cf5 \ul \ulc5 scheme.py}}. For each question, add a few tests to the top of 
\f5 tests.scm
\f2  to verify the behavior of your implementation.
\b0 \
\pard\pardeftab720\sl440\sa180
{\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a-tz/book/chapters/interpretation.html#interpreters-for-languages-with-abstraction"}}{\fldrslt \cf5 \ul \ulc5 Chapter 3.7}} of the course lecture notes describes the structure of the Scheme evaluator. In the implementation given to you, the 
\f3 scheme_eval
\f2  function is complete, but few of the functions or methods it uses are implemented. In fact, the evaluator can only evaluate self-evaluating expressions: numbers, booleans, and 
\f3 nil
\f2 .\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem 3
\b0  (2 pt). Implement 
\f3 apply_primitive
\f2 , which is called by 
\f3 scheme_apply
\f2  for 
\f3 PrimitiveProcedures
\f2 . Primitive procedures are applied by calling a corresponding Python function that implements the procedure.\
Scheme primitive procedures are represented as instances of the 
\f3 PrimitiveProcedure
\f2  class, defined in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_primitives.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_primitives.py}}. A 
\f3 PrimitiveProcedure
\f2  has two instance attributes:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls4\ilvl0
\f3 \cf4 {\listtext	\'95	}self.fn
\f2  is the Python function that implements the primitive Scheme procedure.\
\ls4\ilvl0
\f3 {\listtext	\'95	}self.use_env
\f2  is a boolean flag that indicates whether or not this primitive procedure will expect the current environment to be passed in as the last argument. The environment is required, for instance, to implement the primitive 
\f3 eval
\f2  procedure.\
\pard\pardeftab720\sl440\sa180
\cf4 To see a list of all Scheme primitive procedures used in the project, look in the {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_primitives.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_primitives.py}} file. Any function decorated with 
\f3 @primitive
\f2  will be added to the globally-defined 
\f3 _PRIMITIVES
\f2  list.\
The 
\f3 apply_primitive
\f2  function takes a 
\f3 PrimitiveProcedure
\f2  instance, a Scheme list of argument values, and the current environment. Your implementation should:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls5\ilvl0\cf4 {\listtext	\'95	}Convert the Scheme list to a Python list of arguments.\
{\listtext	\'95	}If the 
\f3 procedure.use_env
\f2  is 
\f3 True
\f2 , then add the current environment 
\f3 env
\f2  as the last argument.\
{\listtext	\'95	}Call 
\f3 procedure.fn
\f2  on those arguments (
\i hint
\i0 : use * notation).\
{\listtext	\'95	}If calling the function results in a 
\f3 TypeError
\f2  exception being thrown, then raise a 
\f3 SchemeError
\f2  instead.\
\pard\pardeftab720\sl440\sa180
\cf4 The doctest for 
\f3 apply_primitive
\f2  should now pass. However, your Scheme interpreter will still not be able to apply primitive procedures, because your Scheme interpreter still doesn't know how to look up the values for the primitive procedure symbols (such as 
\f3 +
\f2 , 
\f3 *
\f2 , and 
\f3 car
\f2 ).\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem 4
\b0  (2 pt) Implement the 
\f3 lookup
\f2  method of the 
\f3 Frame
\f2  class. It takes a symbol (Python string) and returns the value bound to that name in the first frame of the environment in which it is found. A 
\f3 Frame
\f2  represents an environment via two instance attributes:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls6\ilvl0
\f3 \cf4 {\listtext	\'95	}self.bindings
\f2  is a dictionary that maps Scheme symbols (represented as Python strings) to Scheme values.\
\ls6\ilvl0
\f3 {\listtext	\'95	}self.parent
\f2  is the parent 
\f3 Frame
\f2  instance. The parent of the Global Frame is 
\f3 None
\f2 .\
\pard\pardeftab720\sl440
\cf4 Your 
\f3 lookup
\f2  implementation should,\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls7\ilvl0\cf4 {\listtext	\'95	}Return the value of a symbol in 
\f3 self.bindings
\f2  if it exists.\
{\listtext	\'95	}Otherwise, 
\f3 lookup
\f2  that symbol in the parent if it exists.\
{\listtext	\'95	}Otherwise, raise a 
\f3 SchemeError
\f2 .\
\pard\pardeftab720\sl440\sa180
\cf4 After you complete this problem, you should be able to evaluate primitive procedure calls, giving you the functionality of the Calculator language and more.\
\pard\pardeftab720

\f3 \cf4     scm> +\
    <scheme_primitives.PrimitiveProcedure object at 0x2742d50>\
    scm> (+ 1 2)\
    3\
    scm> (* 3 4 (- 5 2) 1)\
    36\
    scm> (odd? 31)\
    True\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem A5
\b0  (1 pt). There are two missing parts in the method 
\f3 do_define_form
\f2 , which handles the 
\f3 (define\'a0...)
\f2  special forms. Implement just the first part, which binds names to values but does not create new procedures.\
\pard\pardeftab720

\f3 \cf4     scm> (define tau (* 2 3.1415926))\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 You should now be able to give names to values and evaluate symbols to those values.\
\pard\pardeftab720

\f3 \cf4     scm> (define x 15)\
    scm> (define y (* 2 x))\
    scm> y\
    30\
    scm> (+ y (* y 2) 1)\
    91\
    scm> (define x 20)\
    scm> x\
    20\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem B6
\b0  (1 pt). Implement the 
\f3 do_quote_form
\f2  function, which evaluates the 
\f3 quote
\f2  special form. Once you have done so, you can evaluate quoted expressions.\
\pard\pardeftab720

\f3 \cf4     scm> 'hello\
    hello\
    scm> '(1 . 2)\
    (1 . 2)\
    scm> '(1 (2 three . (4 . 5)))\
    (1 (2 three 4 . 5))\
    scm> (car '(a b))\
    a\
    scm> (eval (cons 'car '('(1 2))))\
    1\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 At this point in the project, your Scheme interpreter should be be able to support the following features:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls8\ilvl0\cf4 {\listtext	\'95	}Evaluate atoms, which include numbers, booleans, nil, and symbols,\
{\listtext	\'95	}Evaluate the 
\f3 quote
\f2  special form,\
{\listtext	\'95	}Evaluate lists,\
{\listtext	\'95	}Define symbols, and\
{\listtext	\'95	}Call primitive procedures, such as 
\f3 (+ (- 4 2) 5)
\f2 \
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 User-Defined Procedures\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 In our interpreter, user-defined procedures will be represented as instances of the 
\f3 LambdaProcedure
\f2  class, defined in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme.py}}. A 
\f3 LambdaProcedure
\f2 instance has three instance attributes:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls9\ilvl0
\f3 \cf4 {\listtext	\'95	}self.formals
\f2  is a Scheme list of the formal parameters (symbols) that name the arguments of the procedure.\
\ls9\ilvl0
\f3 {\listtext	\'95	}self.body
\f2  is a single Scheme expression; the body of the procedure.\
\ls9\ilvl0
\f3 {\listtext	\'95	}self.env
\f2  is the environment in which the procedure was defined.\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem 7
\b0  (2 pt). Implement the 
\f3 begin
\f2  special form, which has a list of one or more sub-expressions that are each evaluated in order. The value of the final sub-expression is the value of the 
\f3 begin
\f2  expression.\
\pard\pardeftab720

\f3 \cf4     scm> (begin (+ 2 3) (+ 5 6))\
    11\
    scm> (begin (display 3) (newline) (+ 2 3))\
    3\
    5\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 \ul \ulc4 Note\ulnone : When 
\f3 scheme_eval
\f2  evaluates one of the conditional constructs (
\f3 if
\f2 , 
\f3 and
\f2 , 
\f3 or
\f2 , 
\f3 cond
\f2 , 
\f3 begin
\f2 , 
\f3 case
\f2 ), notice that it calls 
\f3 scheme_eval
\f2  on the 
\b return value
\b0  of the relevant 
\f3 do_FORM
\f2  procedures (
\f3 do_begin_form
\f2 , 
\f3 do_cond_form
\f2 , etc.). Take care that your Scheme interpreter doesn't inadvertantly call
\f3 scheme_eval
\f2  on the same value twice, or else you might get the following invalid behavior:\
\pard\pardeftab720

\f3 \cf4     scm> (begin 30 'hello)\
    Error: unknown identifier: hello\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem 8
\b0  (2 pt). Implement the 
\f3 do_lambda_form
\f2  method, which creates 
\f3 LambdaProcedure
\f2  values by evaluating 
\f3 lambda
\f2  expressions. While you cannot call a user-defined procedure yet, you can verify that you have read the procedure correctly by evaluating a lambda expression.\
\pard\pardeftab720

\f3 \cf4     scm> (lambda (x y) (+ x y))\
    (lambda (x y) (+ x y))\
  \
\pard\pardeftab720\sl440

\f2 \cf4 In Scheme, it is legal to have function bodies with more than one expression:
\f3 \
\pard\pardeftab720
\cf4     STk> ((lambda (y) 42 (* y 2)) 5)\
    10\
  \
\pard\pardeftab720\sl440

\f2 \cf4 In order to implement this feature, your 
\f3 do_lambda_form
\f2  should detect when the body of a lambda expression contains multiple expressions. If so, then
\f3 do_lambda_form
\f2  should place the expressions inside of a 
\f3 (begin ...)
\f2  expression, and use that 
\f3 begin
\f2  expression as the body:
\f3 \
\pard\pardeftab720
\cf4     scm> (lambda (y) 42 (* y 2))\
    (lambda (y) (begin 42 (* y 2)))\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem A9
\b0  (1 pt). Currently, your Scheme interpreter is able to define user-defined procedures in the following manner:\
\pard\pardeftab720

\f3 \cf4     scm> (define f (lambda (x) (* x 2)))\
  \
\pard\pardeftab720\sl440

\f2 \cf4 However, we'd like to be able to use the shorthand form of defining procedures:
\f3 \
\pard\pardeftab720
\cf4     scm> (define (f x) (* x 2))\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 Modify the 
\f3 do_define_form
\f2  function so that it correctly handles the shorthand procedure definition form above. Make sure that it can handle multi-expression bodies. 
\i Hint
\i0 : construct a 
\f3 lambda
\f2  expression and evaluate it with 
\f3 do_lambda_form
\f2 .\
Once you have completed this problem, you should find that defined procedures evaluate to lambda procedures.\
\pard\pardeftab720

\f3 \cf4     scm> (define (square x) (* x x))\
    scm> square\
    (lambda (x) (* x x))\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem 10
\b0  (2 pt). Implement the 
\f3 make_call_frame
\f2  method of the 
\f3 Frame
\f2  class. It should:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls10\ilvl0\cf4 {\listtext	\'95	}Creating a new Frame, the parent of which is 
\f3 self
\f2 .\
{\listtext	\'95	}Binding formal parameters to their associated argument values.\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem B11
\b0  (1 pt). Implement the 
\f3 check_formals
\f2  function to raise an error whenever the Scheme list of formal parameters passed to it is invalid. Raise a 
\f3 SchemeError
\f2  if the list of 
\f3 formals
\f2  is not a well-formed list of symbols or if any symbol is repeated.\

\b Problem 12
\b0  (2 pt). Implement 
\f3 scheme_apply
\f2  to correctly apply user-defined 
\f3 LambdaProcedure
\f2  instances. (The case of 
\f3 MuProcedures
\f2  is handled later in the project). It should:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls11\ilvl0\cf4 {\listtext	\'95	}Create a new 
\f3 Frame
\f2 , with all formal parameters bound to their argument values.\
{\listtext	\'95	}Evaluate the body of 
\f3 procedure
\f2  in the environment represented by this new frame.\
{\listtext	\'95	}Return the value of calling 
\f3 procedure
\f2 .\
\pard\pardeftab720\sl440\sa180
\cf4 After you complete 
\f3 scheme_apply
\f2 , user-defined functions (and lambda functions) should work in your Scheme interpreter. Now is an excellent time to revisit the tests in 
\f3 tests.scm
\f2  and ensure that you pass the ones that involve definition (Sections 1.1.2 and 1.1.4). You should also add additional tests of your own to verify that your interpreter is behaving as you expect.\
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 Special Forms\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 The basic Scheme logical special forms are 
\f3 if
\f2 , 
\f3 and
\f2 , 
\f3 or
\f2 , and 
\f3 cond
\f2 . These expressions are special because not all of their sub-expressions may be evaluated.\
In Scheme, only 
\f3 #f
\f2  (also known as 
\f3 false
\f2  or 
\f3 False
\f2 ) is a false value. All other values are true values. You can test whether a value is a true value or a false value using the provided Python functions 
\f3 scheme_true
\f2  and 
\f3 scheme_false
\f2 , defined in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_primitives.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_primitives.py}}.\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem A13
\b0  (1 pt). Implement 
\f3 do_if_form
\f2  so that 
\f3 if
\f2  expressions are evaluated correctly. This function should return either the second (consequent) or third (alternative) expression of the 
\f3 if
\f2  expression, depending on the value of the first (predicate) expression.\
\pard\pardeftab720\sl440\sa180
\cf4 \ul \ulc4 Note\ulnone : For this project, we will only handle 
\f3 if
\f2  expressions that contain three operands. The following expressions should be correctly supported by your interpreter:\
\pard\pardeftab720

\f3 \cf4     scm> (if (= 4 2) true false)\
    False\
    scm> (if (= 4 4) (* 1 2) (+ 3 4))\
    2\
  \
\pard\pardeftab720\sl440

\f2 \cf4 And the following expression should be rejected by your interpreter:
\f3 \
\pard\pardeftab720
\cf4     scm> (if (= 4 2) true)\
    Error: too few operands in form\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem B14
\b0  (2 pt). Implement 
\f3 do_and_form
\f2  and 
\f3 do_or_form
\f2  so that 
\f3 and
\f2  and 
\f3 or
\f2  expressions are evaluated correctly. The logical forms 
\f3 and
\f2  and 
\f3 or
\f2  are
\i short-circuiting
\i0 . For 
\f3 and
\f2 , your interpreter should evaluate each argument from left to right, and if any argument evaluates to 
\f3 False
\f2 , then 
\f3 False
\f2  is returned. If all but the last sub-expressions evaluate to true values, return the last sub-expression from 
\f3 do_and_form
\f2 . Likewise for 
\f3 or
\f2  evaluate each argument from left to right, amd if any argument evaluates to a true value, then return it. If all but the last sub-expression evaluate to false, return the last sub-expression from 
\f3 do_or_form
\f2 .\
\pard\pardeftab720

\f3 \cf4     scm> (and)\
    True\
    scm> (or)\
    False\
    scm> (and 4 5 6)\
    6    ; all operands are true values\
    scm> (or 5 2 1)\
    5    ; 5 is a true value\
    scm> (and #t #f 42 (/ 1 0))\
    False    ; short-circuiting behavior of and\
    scm> (or 4 #t (/ 1 0))\
    4    ; short-circuiting behavior of or\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem A15
\b0  (1 pt). Implement 
\f3 do_cond_form
\f2  so that it returns the first result sub-expression corresponding to a true predicate (or else). Your implementation should match the following examples and the additional tests in 
\f3 tests.scm
\f2 .\
\pard\pardeftab720

\f3 \cf4     scm> (cond ((= 4 3) 'nope)\
              ((= 4 4) 'hi)\
              (else 'wait))\
    hi\
    scm> (cond ((= 4 3) 'wat)\
              ((= 4 4))\
              (else 'hm))\
    True\
    scm> (cond ((= 4 4) 'here 42)\
              (else 'wat 0))\
    42\
  \
\pard\pardeftab720\sl440

\f2 \cf4 For the last example, where the body of a 
\f3 cond
\f2  has multiple expressions, you might find it helpful to replace 
\f3 cond
\f2 -bodies with multiple expression bodies into a single 
\f3 begin
\f2  expression, i.e., the following two expressions are equivalent.
\f3 \
\pard\pardeftab720
\cf4     (cond ((= 4 4) 'here 42))\
    (cond ((= 4 4) (begin 'here 42)))\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 A few clarifications:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls12\ilvl0\cf4 {\listtext	\'95	}In this project, all 
\f3 else
\f2  clauses must contain at least one expression, i.e. the following 
\f3 cond
\f2  usage is invalid in our project:
\f3 scm> (cond ((= 4 3) 5) (else)) 
\f2 \
{\listtext	\'95	}If no test of a 
\f3 cond
\f2  is satisfied, then your 
\f3 do_cond_form
\f2  should return 
\f3 None
\f2 , which signals an 
\i undefined expression
\i0 .\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem A16
\b0  (2 pt). The 
\f3 let
\f2  special form introduces local variables, giving them their initial values. For example,\
\pard\pardeftab720

\f3 \cf4     scm> (define x 'hi)\
    scm> (define y 'bye)\
    scm> (let ((x 42)\
              (y (* 5 10)))\
          (list x y))\
    (42 50)\
    scm> (list x y)\
    (hi bye)\
  \
\pard\pardeftab720\sl440

\f2 \cf4 Implement the 
\f3 do_let_form
\f2  method to have this effect and test it, by adding test cases to 
\f3 tests.scm
\f2 . Make sure your 
\f3 let
\f2  correctly handles multi-expression bodies:
\f3 \
\pard\pardeftab720
\cf4     scm> (let ((x 42)) x 1 2)\
    2\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 The let special form is equivalent to creating and then calling a lambda procedure. That is, the following two expressions are equivalent:\
\pard\pardeftab720

\f3 \cf4     (let ((x 42) (y 16)) (+ x y))\
    ((lambda (x y) (+ x y)) 42 16)\
  \
\pard\pardeftab720\sl440

\f2 \cf4 Thus, a 
\f3 let
\f2  form implicitly creates a new 
\f3 Frame
\f2  (containing the 
\f3 let
\f2  bindings) which extends the current environment and evaluates the body of the 
\f3 let
\f2 with respect to this new 
\f3 Frame
\f2 . This is very much exactly like a user-defined function call. Note that, in your project code, you don't have to actually create a 
\f3 LambdaProcedure
\f2  and call it. Instead, you can create a new 
\f3 Frame
\f2 , add the necessary bindings, and evaluate the expressions of the 
\f3 let
\f2  body with respect to the new 
\f3 Frame
\f2 .\
\pard\pardeftab720\sl440\sa180
\cf4 \
The bindings created by a 
\f3 let
\f2  are not able to refer back to previously-declared bindings from the same 
\f3 let
\f2 .\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem B17
\b0  (2 pt). Implement 
\f3 do_mu_form
\f2  to evaluate the 
\f3 mu
\f2  special form, a non-standard Scheme expression type. A 
\f3 mu
\f2  expression is similar to a
\f3 lambda
\f2  expression, but evaluates to a 
\f3 MuProcedure
\f2  instance that is dynamically scoped. The 
\f3 MuProcedure
\f2  class has been provided for you.\
Additionally, complete 
\f3 scheme_apply
\f2  to call 
\f3 MuProcedure
\f2  procedures using dynamic scoping. Calling a 
\f3 LambdaProcedure
\f2  uses lexical scoping: the parent of the new call frame is the environment in which the procedure was defined. Calling a 
\f3 MuProcedure
\f2  created by a 
\f3 mu
\f2  expression uses dynamic scoping: the parent of the new call frame is the environment in which the call expression was evaluated. As a result, a 
\f3 MuProcedure
\f2  does not need to store an environment as an instance attribute. It can refer to names in the environment from which it was called.\
\pard\pardeftab720

\f3 \cf4     scm> (define f (mu (x) (+ x y)))\
    scm> (define g (lambda (x y) (f (+ x x))))\
    scm> (g 3 7)\
    13\
  \
\pard\pardeftab720\sl440\sa180

\f2 \cf4 Your Scheme interpreter implementation is now complete. You should have been adding tests to 
\f3 tests.scm
\f2  as you did each problem. These tests will be evaluated as part of your composition score for the project. Make sure that your project works as expected.\
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 Part 3: Write Some Scheme\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 Not only is your Scheme interpreter itself a tree-recursive program, but it is flexible enough to evaluate 
\i other
\i0  recursive programs. Implement the following procedures in Scheme at the bottom of {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/tests.scm"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 tests.scm}}.\
\pard\pardeftab720\sl440\sa180

\b \cf4 Problem 18
\b0  (2 pt). Implement the 
\f3 merge
\f2  procedure, which takes two sorted list arguments and combines them into one sorted list. For example:\
\pard\pardeftab720

\f3 \cf4     scm> (merge '(1 4 6) '(2 5 8))\
    (1 2 4 5 6 8)\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem A19
\b0  (2 pt). Implement the 
\f3 count-change
\f2  procedure, which counts all of the ways to make change for a 
\f3 total
\f2  amount, using coins with various denominations (
\f3 denoms
\f2 ), but never uses more than 
\f3 max-coins
\f2  in total. The procedure definition line is provided in 
\f3 tests.scm
\f2 , along with a list of U.S. denominations.\

\b Problem B20
\b0  (2 pt) Implement the 
\f3 count-partitions
\f2  procedure, which counts all the ways to partition a positive integer 
\f3 total
\f2  using only pieces less than or equal to another positive integer 
\f3 max-value
\f2 . The number 
\f3 5
\f2  has 5 partitions using pieces up to a 
\f3 max-value
\f2  of 
\f3 3
\f2 :\
\pard\pardeftab720

\f3 \cf4     3, 2 (two pieces)\
    3, 1, 1 (three pieces)\
    2, 2, 1 (three pieces)\
    2, 1, 1, 1 (four pieces)\
    1, 1, 1, 1, 1 (five pieces)\
  \
\pard\pardeftab720\sl440\sa180

\f2\b \cf4 Problem 21
\b0  (2 pt). Implement the 
\f3 list-partitions
\f2  procedure, which lists all of the ways to partition a positive integer 
\f3 total
\f2  into at most 
\f3 max-pieces
\f2 pieces that are all less than or equal to a positive integer 
\f3 max-value
\f2 . 
\i Hint
\i0 : Define a helper function to construct partitions.\

\b Problem 22
\b0  (0 pt). Implement the 
\f3 hax
\f2  procedure that draws the following recursive illustration when passed two arguments, a side length 
\f3 d
\f2  and recursive depth 
\f3 k
\f2 . The example below is drawn from 
\f3 (hax 200 4)
\f2 .\
\pard\pardeftab720\sl440

\f1 \cf0 
\f2 \cf4 \
\pard\pardeftab720\sl440\sa180
\cf4 To see how this illustration is constructed, consider this annotated version that gives the relative lengths of lines of the component shapes in the figure.\
\pard\pardeftab720\sl440

\f1 \cf0 
\f2 \cf4 \
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 Extra Credit\
\pard\pardeftab720\sl440\sa180

\f2\fs24 \cf4 Problem 23
\b0  (5 pt). Complete the function 
\f3 scheme_optimized_eval
\f2  in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme.py}}. This alternative to 
\f3 scheme_eval
\f2  is properly tail recursive. That is, the interpreter will allow an unbounded number of active {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Tail_call"}}{\fldrslt \cf5 \ul \ulc5 tail calls}} in constant space.\
Instead of recursively calling 
\f3 scheme_eval
\f2  for tail calls and logical special forms, and 
\f3 let
\f2 , replace the current 
\f3 expr
\f2  and 
\f3 env
\f2  with different expressions and environments. For call expressions, this change only applies to calling user-defined procedures.\
Once you finish, uncomment the line 
\f3 scheme_eval = scheme_optimized_eval
\f2  in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme.py}}.\

\b Congratulations!
\b0  You have finished the final project for 61A! Assuming your tests are good and you've passed them all, consider yourself a proper computer scientist!\
Now, get some sleep. You've earned it!\
\pard\pardeftab720\sl400

\f0\b\fs44 \cf2 Contest: Recursive Art\
\pard\pardeftab720\sl440\sa180

\f2\b0\fs24 \cf4 We've added a number of primitive drawing procedures that are collectively called "turtle graphics". The 
\i turtle
\i0  represents the state of the drawing module, which has a position, an orientation, a pen state (up or down), and a pen color. The 
\f3 tscheme_
\f6\i x
\f2\i0  functions in {\field{\*\fldinst{HYPERLINK "http://inst.eecs.berkeley.edu/~cs61a/fa12/projects/scheme/scheme_primitives.py.html"}}{\fldrslt 
\f3 \cf5 \ul \ulc5 scheme_primitives.py}} are the implementations of these procedures, and show their parameters with a brief description of each. The Python {\field{\*\fldinst{HYPERLINK "http://docs.python.org/release/3.2/library/turtle.html"}}{\fldrslt \cf5 \ul \ulc5 documentation of the turtle module}} contains more detail.\
\pard\pardeftab720\sl440\sa180

\b \cf4 Contest
\b0  (3 pt). Create a visualization of an iterative or recursive process of your choosing, using turtle graphics. Your implementation must be written entirely in Scheme using the interpreter you have built.\
Prizes will be awarded for the winning entry in each of the following categories.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls13\ilvl0
\b \cf4 {\listtext	\'95	}Featherweight.
\b0  At most 256 tokens of Scheme, not including comments and delimiters.\
\ls13\ilvl0
\b {\listtext	\'95	}Heavyweight.
\b0  At most 2012 tokens of Scheme, not including comments and delimiters.\
\pard\pardeftab720\sl440\sa180
\cf4 Entries (code and results) will be posted online, and winners will be selected by popular vote as part of a future homework. The voting instructions will read:\
\pard\pardeftab720\sl440
\cf4 Please vote for your favorite entry in this semester's 61A Recursion Exposition contest. The winner should exemplify the principles of elegance, beauty, and abstraction that are prized in the Berkeley computer science curriculum. As an academic community, we should strive to recognize and reward merit and achievement (translation: please don't just vote for your friends).\
\pard\pardeftab720\sl440\sa180
\cf4 To improve your chance of success, you are welcome to include a title and descriptive {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Haiku"}}{\fldrslt \cf5 \ul \ulc5 haiku}} in the comments of your entry, which will be included in the voting.\
Submission instructions will be posted shortly.\
}